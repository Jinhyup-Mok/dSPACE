apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "simphera.resourceLabels" (list . "keycloak") | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "simphera.selectorLabels" (list . "keycloak") | nindent 6 }}
  replicas: 1
  serviceName: keycloak
  template:
    metadata:
      labels:
        {{- include "simphera.templateLabels" (list . "keycloak") | nindent 8 }}
    spec:
      {{- if .Values.global.simphera.serviceAccounts.simphera }}
      serviceAccountName: {{ .Values.global.simphera.serviceAccounts.simphera | quote }}
      {{- else }}
      serviceAccountName: simphera
      {{- end }}
      securityContext:
        runAsUser: 1000
      volumes:
        - name: keycloak-realm-configmap
          configMap:
            name: keycloak-realm-configmap
            defaultMode: 420
        - name: temporary-theme
          emptyDir: {}
        - name: dspace-cloud-theme
          configMap:
            name: dspace-cloud-theme
            defaultMode: 420
      initContainers:
        - name: theme-provider
          image: {{ .Values.global.simphera.image.thirdparty.busybox | quote }}
          imagePullPolicy: IfNotPresent
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          command:
            - sh
          args:
            - '-c'
            - |
              cd /target
              base64 -d /source/theme.tar.gz.b64 | tar x -z --strip-components=1
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
            limits:
              cpu: 1
              memory: 1Gi
          volumeMounts:
            - name: dspace-cloud-theme
              mountPath: /source
            - name: temporary-theme
              mountPath: /target
      containers:
        - name: keycloak
          image: {{ .Values.global.simphera.image.thirdparty.keycloak | quote }}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
          command:
            - opt/keycloak/bin/kc.sh
          args:
            - 'start'
            - '--spi-connections-jpa-legacy-migration-strategy=update'
            - '--import-realm'
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: http-management
              containerPort: 9990
              protocol: TCP
          env:
            # see https://www.keycloak.org/server/all-config > Logging > log-level (expand)
            - name: KC_LOG_LEVEL
              value: {{ .Values.global.simphera.log.level | quote }}
            - name: ROOT_LOGLEVEL
              value: {{ .Values.global.simphera.log.level | quote }}
            - name: KC_PROXY
              value: edge
            - name: PROXY_ADDRESS_FORWARDING
              value: 'true'
            - name: KC_HOSTNAME_STRICT
              value: 'false'
            - name: KC_HOSTNAME_STRICT_HTTPS
              value: 'false'
            {{- if .Values.global.simphera.baseUrls.keycloak}}
            - name: KC_HOSTNAME_ADMIN_URL
              value: {{ .Values.global.simphera.baseUrls.keycloak  }}
            - name: KC_HOSTNAME_URL
              value: {{ .Values.global.simphera.baseUrls.keycloak  }}
            {{- end}}
            - name: KC_HTTP_RELATIVE_PATH
              value: '/auth'
            - name: KEYCLOAK_ADMIN
              valueFrom:
                secretKeyRef:
                  {{- if .Values.global.simphera.keycloak.adminSecret }}
                  name: {{ .Values.global.simphera.keycloak.adminSecret }}
                  {{- else }}
                  name: keycloak-admin-secret
                  {{- end }}
                  key: username
            - name: KEYCLOAK_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  {{- if .Values.global.simphera.keycloak.adminSecret }}
                  name: {{ .Values.global.simphera.keycloak.adminSecret }}
                  {{- else }}
                  name: keycloak-admin-secret
                  {{- end }}
                  key: password
            - name: KC_DB
              value: postgres
            - name: KC_DB_URL_HOST
              value: {{ .Values.global.simphera.databases.keycloak.pgHost | quote }}
            - name: KC_DB_URL_PORT
              value: {{ .Values.global.simphera.databases.keycloak.pgPort | quote }}
            - name: KC_DB_URL_DATABASE
              value: {{ .Values.global.simphera.databases.keycloak.pgDatabase | quote }}
{{- if .Values.global.simphera.databases.keycloak.secret }}
            - name: KC_DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.simphera.databases.keycloak.secret }}
                  key: username
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.global.simphera.databases.keycloak.secret }}
                  key: password
{{- else }}
            - name: KC_DB_USERNAME
              value: {{ .Values.global.simphera.databases.keycloak.pgUsername | quote }}
            - name: KC_DB_PASSWORD
              value: {{ .Values.global.simphera.databases.keycloak.pgPassword | quote }}
{{- end }}
          volumeMounts:
            - name: keycloak-realm-configmap
              readOnly: true
              mountPath: /opt/keycloak/data/import/
            - name: temporary-theme
              mountPath: /opt/keycloak/themes/dspace-cloud-theme
          livenessProbe:
            httpGet:
              path: /auth/
              port: http
              scheme: HTTP
            timeoutSeconds: 5
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          startupProbe:
            httpGet:
              path: /auth/
              port: http
              scheme: HTTP
            initialDelaySeconds: 30
            timeoutSeconds: 1
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 60
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
      {{- with .Values.global.simphera.linuxNodes.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.global.simphera.linuxNodes.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      imagePullSecrets:
      {{- range .Values.global.simphera.image.pullSecrets }}
        - name: {{ . }}
      {{- end}}

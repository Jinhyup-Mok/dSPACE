global:
  simphera:
    image:
      # Pull secrets for accessing container registries with authentication.
      # For `registry.dspace.cloud` no pull secrets are needed.
      pullSecrets: []

      thirdparty:
        # It is intented that the repository is set to 'null' because the single source of the
        # default value is the values.yaml file of the Quickstart chart.
        minio: null

    linuxNodes:
      nodeSelector:
        kubernetes.io/os: linux
      tolerations: []

    hostnames:
      minio: null

    tlsCertificates:
      minio: null

    minio:
      # MinIO uses an admin user with username and password authentication. You either have to specify username and password here
      # using adminUser and adminPassword, or you have to specify the name of an existing secret in adminSecret.
      # The admin secret must contain the fields 'user' and 'password'.
      adminUser: null
      adminPassword: null
      adminSecret: null

      # Modes:
      # You can use MinIO either using a Kubernetes persistent volume or as gateway to Azure Blob Storage or AWS S3.
      mode: null
      # persistent-volume: MinIO will use a single persistent volume to store the files. In that case you also have to specify storageClass and storageSize.
      # mode: persistent-volume
      storageClass: null
      storageSize: null

      # azure: MinIO is configured as a gateway to Azure Blob Storage. To authenticate against Azure you either have to specify 'azureStorageAccount'
      # and 'azureStorageKey' or you have to specify 'azureStorageSecret'. The azure storage secret must contain the fields 'account'
      # and 'key'.
      # mode: azure
      azureStorageAccount: null
      azureStorageKey: null
      azureStorageSecret: null

      # aws: MinIO is configured as a gateway to AWS S3 storage. To authenticate against S3 you either have to specify 's3AccessKeyId'
      # and 's3SecretAccessKey' or you have to specify 's3Secret'. The secret must contain the fields 'accesskeyid'
      # and 'secretaccesskey'.
      # If you want to use IRSA (IAM roles for service accounts), you have to set 'enabledIrsa' to `true`.
      # In that case 's3AccessKeyId', 's3SecretAccessKey', and 's3Secret' must be `null`.
      # If you want to use a S3 compatible service instead of the AWS S3 storage, you have to set the 's3serviceEndpoint'.
      # mode: aws
      s3AccessKeyId: null
      s3SecretAccessKey: null
      s3Secret: null
      enabledIrsa: false
      s3serviceEndpoint: null

    ingress:
      # Additional annotations for all ingresses
      additionalAnnotations: {}

      # Redirect all requests from HTTP to HTTPS for all ingresses.
      # NOTE: Only set this value to 'false' if other security features such as a central app gateway is configured.
      sslRedirect: true

    serviceAccounts:
      minio: null

resources:
  requests:
    memory: 500Mi
    cpu: 10m
  limits:
    memory: 1Gi
    cpu: 4000m

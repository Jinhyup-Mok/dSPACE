global:
  simphera:
    # To deploy and use SIMPHERA you have to accept the dSPACE EULA. The file is included in the
    # SIMPHERA Legal Notices.
    # By setting this value to `true` you accept this agreement.
    dspaceEulaAccepted: true

    # To deploy and use SIMPHERA you have to
    # accept the Microsoft .NET Library License. Refer to
    # https://www.microsoft.com/web/webpi/eula/net_library_eula_enu.htm or
    # the net_library_eula_enu.htm file of the SIMPHERA Legal Notices.
    # By setting this value to `true` you accept this agreement.
    microsoftDotnetLibraryLicenseAccepted: true

    # image:
    #   # Container Registry used for all images
    #   registry: registry.dspace.cloud

    #   # Tag to be used for all container images
    #   tag: 2023-05-26-1639-1 # today's date and time..?
    #   # 2023-05-26-1639-1 : basic set

    #   # Pull secrets for accessing container registries with authentication.
    #   # For `registry.dspace.cloud` no pull secrets are needed.
    #   pullSecrets: []

    #   # The pull policy used for all pods.
    #   pullPolicy: IfNotPresent

    #   # If your cluster cannot pull images from public registries then you can configure alternative repositories
    #   # for the following third party images:
    #   thirdparty:
    #     keycloak: quay.io/keycloak/keycloak:20.0.0
    #     busybox: docker.io/busybox:1.35.0
    #     mosquitto: docker.io/eclipse-mosquitto:2.0.14-openssl

    openIdProvider:
      # SIMPHERA uses OpenID Connect for authentication.
      # You have to specify the URL to your OpenID Connect provider.
      # If you use Keycloak that is provided as part of this Helm Chart, the URL will
      # look like this:
      # https://<your Keycloak DNS name>/auth/realms/simphera
      issuerUrl: https://mysimphera-login.dspace.cloud/auth/realms/simphera

      # The client id of the SIMPHERA app that you configured in your OpenID connect provider.
      # If you use the provided Keycloak with the default configuration then the client id is `simphera-client`.
      # clientId: simphera-client

      # The URL the client is redirected to after logout.
      # postLogoutRedirectUrl: null

      # The OIDC scopes.
      # scope: openid profile

      # The name of the claim in the access token containing the user ID.
      # principalIdClaim: sub

      # The name of the claim in the access token containing the IDs of the groups to which the the user belongs.
      # groupIdsClaim: group_ids

    # You can activate authorization in SIMPHERA to enable role-based access to projects.
    # As a default the authorization is disabled. That means every authenticated user has
    # all permissions. When authorization is enabled role-based permissions are applied.
    # If you enable authorization no regular user can access anything. Instead a super-user
    # has to set permissions first. To make a user a super-user the access token has to contain
    # the role configured under `global.simphera.authorization.superuserRole` in the `roles` claim.
    # Please keep in mind to set the values `global.simphera.openIdProvider.principalIdClaim`
    # and `global.simphera.openIdProvider.groupIdsClaim` correctly.
    # authorization:
    #   enabled: false
    #   superuserRole: simphera_superuser

    # All containers of the SIMPHERA backend are deployed as kubernetes pods with the same `nodeSelectors`
    # and `tolerations`.
    # However, for the execution agents individual `nodeSelectors` and `tolerations` can be defined.
    # linuxNodes:
    #   nodeSelector:
    #     kubernetes.io/os: linux
    #   tolerations: []

    # linuxAurelionNodes:
    #   ## Node labels for AURELION pod assignment
    #   ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
    #   nodeSelector:
    #     kubernetes.io/os: linux

    #   ## Taints to be tolerated for AURELION pod assignment.
    #   ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
    #   tolerations: []
    #   #  - key: "toleration"
    #   #    operator: "Equal"
    #   #    value: "value"
    #   #    effect: "NoSchedule"

    # Depending on your setup, up to three DNS names are needed to run SIMPHERA. These names have to be
    # specified under this `hostnames` node. If you do not deploy _MinIO_ or _Keycloak_ you don't need
    # to specify the corresponding name.
    hostnames: # set by Mok
      simphera: "mysimphera.dspace.cloud" # our custom set / default : null
      minio: "mysimphera-minio.dspace.cloud" # out custom set / default : null
      keycloak: "mysimphera-login.dspace.cloud" # out custom set / default : null

    # Per default base URLs of the various apps are assumed to be hosted under:
    # https://{hostname}/
    # If they are reachable under a different port or via HTTP instead of HTTPS then
    # you must configure these URLs. Otherwise you can leave the values unset.
    # baseUrls:
    #   simphera: null
    #   minio: null
    #   keycloak: null

    # Depending on your setup, up to three TLS certificates are needed to run SIMPHERA. You have to create
    # kubernetes secrets for these certificates as explained in the Administration Manual. Here you have to
    # specify the names of these secrets.
    # If you do not deploy _MinIO_ or _Keycloak_ you don't need to specify the corresponding secret.
    tlsCertificates:
      simphera: https-certificate
      minio: https-certificate
      keycloak: https-certificate

    # These settings control the logging of messages.
    # For logging verbosity, the following log levels are available:
    # - TRACE
    # - DEBUG
    # - INFO
    # - ERROR
    # The format of the logged message can be set to one of these values:
    # - CONSOLE_JSON (recommended for monitoring services)
    # - CONSOLE_TEXT (mostly human readable)
    # log:
    #   level: INFO
    #   format: CONSOLE_JSON

    # ingress:
    #   # All the incoming HTTP(S) traffic is routed through the NGINX Ingress Controller.
    #   # You can add additional ingress annotations using this variable, e.g. for adding annotations
    #   # to use the CertManager.
    #   additionalAnnotations: {}

    #   # As a default all HTTP requests are redirected to HTTPS. Using the following variable
    #   # you can disable this behavior.
    #   # NOTE: Only set this value to 'false' if other security features such as a central app gateway is configured.
    #   # Otherwise all the communication will be unencrypted.
    #   sslRedirect: true

    # The DNS name of the CodeMeter license server.
    # The license server must be reachable from inside the Kubernetes cluster,
    # i.e., the pods must be able to resolve the DNS name.
    # If you are using the SIMPHERA Reference Architecture for Azure, use the following value:
    # license-server.internal.cloudapp.net
    codemeter:
      server: mycodemeter:22350

    # SIMPHERA can access files and folders from various storage sources. In the following section one or more
    # storages can be configured. Each storage has a name and additional properties.
    # Under `storages` you have to add a YAML map for each individual storage.
    # For each storage you have to provide a type. The following types with their properties are supported:
    # type: MinIO - Used to access MinIO or other S3 compatible services
    #   path: The URL to the root of a MinIO installation, e.g. https://mysimphera-minio.dspace-dev.com/demodata
    #   secretName: The name of an existing secret with the credentials for MinIO. The secret must contain
    #     the keys `user` and `password`. If you do not have an existing secret but wants to specify
    #     the credentials directly, leave this property empty and specify `accessKey` and `secretKey`.
    #   accessKey: The access key for acessing MinIO. Leave this empty if `secretName` is specified.
    #   secretKey: The secret key for acessing MinIO. Leave this empty if `secretName` is specified.
    #   enabledProxy: If this instance of MinIO is only accessible via a web proxy, this property has to be enabled. In that
    #     case the proxy specified under `global.simphera.proxy` is used.
    #   enabledIrsa: If this instance of MinIO is used as a gateway to AWS S3 and you want to use IRSA (IAM roles for service accounts)
    #     you have to enable this property.
    #
    # type: HTTPBearer - Used to access general web services with bearer authentication
    #   path: The URL to the root of the web service, e.g. https://gitlab.com/mySimpheraGitstorageg1/
    #   secretName: The name of an existing secret with the token for the web service. The secret must contain
    #     the key `token` with the bearer token to be used to access to web service. If you do not have an existing
    #     secret, you can specify the token by using the `token` property instead.
    #   token: The bearer token to be used.
    #
    # type: File_System - Used to access files that are available locally in the containers. This type of storage
    #       is only useful for some special use-cases.
    #   path: The absolute path of the root folder.
    #
    # type: PersistentVolume - Used to access files from Kubernetes persistent volumes on the execution nodes.
    #    The persistent volume must use the volume mode 'Filesystem' and the access mode 'ReadWriteMany'.
    #   existingClaim: if you already have a persistent volume claim representing your persistent volume then
    #     you have to set the name of the existing claim here.
    #     Alternatively, you can specify the following properties and the Helm chart will create the claim.
    #   storageClass: the name of the Kubernetes storage class
    #   storageSize: the size of the persistent volume
    #   subPath (optional): If you only want to use some subfolder of the persistent volume as the storage
    #     you have to specify this folder using the `subPath` property. With subpathes you can use a single
    #     persistent volume for several SIMPHERA storages.
    #

    storages:
      default:
        type: Minio
        path: https://mysimphera-minio.dspace.cloud/default
        secretName: simphera-minio-credentials
      resultStorage:
        type: Minio
        path: https://mysimphera-minio.dspace.cloud/results
        secretName: simphera-minio-credentials

        # accessKey: null
        # secretKey: null
        # enabledIrsa: false
        # enabledProxy: false
      measurementStorage:
        name: measurementStorage
        type: PersistentVolume
        existingClaim: data-minio-0
        subPath: measurement
      # The following storages are optional and therefore commented out:
      # Only for DRT: You have to define the mirror for the external recordings.
      # datareplayExternalRecordingsMirrorStorage:
      #   type: Minio
      #   path: null
      #   secretName: null
      #   accessKey: null
      #   secretKey: null
      #   enabledIrsa: false
      #   enabledProxy: false
      # Only for DRT: You have to define the mirror for the external platforms.
      # datareplayExternalPlatformsMirrorStorage:
      #   type: Minio
      #   path: null
      #   secretName: null
      #   accessKey: null
      #   secretKey: null
      #   enabledIrsa: false
      #   enabledProxy: false
      # Only for DRT: You have to define the cache for recordings.
      # datareplayRecordingsCacheStorage:
      #   type: Minio
      #   path: null
      #   secretName: null
      #   accessKey: null
      #   secretKey: null
      #   enabledIrsa: false
      #   enabledProxy: false
      # Only for DRT: You have to define the cache for processing objects.
      # datareplayProcessingObjectCacheStorage:
      #   type: Minio
      #   path: null
      #   secretName: null
      #   accessKey: null
      #   secretKey: null
      #   enabledIrsa: false
      #   enabledProxy: false
      # Only for DRT: If IVS is used define ivsStorage.
      # ivsStorage:
      #   type: Minio
      #   path: https://s3.eu-west-3.amazonaws.com
      #   secretName: ivs-s3-credentials
      #   accessKey: null
      #   secretKey: null
      #   enabledIrsa: false
      #   enabledProxy: false
      # Only for DRT: Define at least one storage for the processing object artifacts.
      # processingObjectStorage:
      #   type: Minio
      #   path: null
      #   secretName: null
      #   accessKey: null
      #   secretKey: null
      #   enabledIrsa: false
      #   enabledProxy: false

    # SIMPHERA uses a PostgreSQL database to store the metadata. In the following property you
    # have to configure the connection to the database. If you deploy Keycloak as well, then you
    # have to configure a database with name 'keycloak' under the node `databases`.

    databases:
      simphera: # This is the configuration of the database used to store the SIMPHERA metadata.
        pgDatabase: simphera # The name of the database
        pgHost: simphera-postgresql # The hostname of the PostgreSQL database server
        pgPort: 5432 # The port of the PostgreSQL database server
        # pgUsername: postgres # The username used to connect to the PostgreSQL database server
        # pgPassword: simpherapostgres # The password used to connect to the PostgreSQL database server
        secret: simphera-postgres-credentials # Name of an existing secret that contains the username and the password.
          # The secret must contain the properties `username` and `password`.
        maxServerConnections: 15 # The maximum number of connections each PGBouncer instance is
          # using to connect to the database server. The SIMPHERA Chart deploys two instances of
          # PGBouncer. So if the value is 15, then up to 30 connections are established.
      # simpheraScbtResults:
      #   # This database configuration is deprecated. You only have to enabled and configure it,
      #   # if you used a separate database for SCBT results in previous versions of SIMPHERA.
      #   enabled: false
      keycloak: # This is the configuration of the database used to store the SIMPHERA metadata.
        pgDatabase: keycloak # The name of the database
        pgHost: simphera-postgresql # The hostname of the PostgreSQL database server
        pgPort: 5432 # The port of the PostgreSQL database server
        # pgUsername: postgres # The username used to connect to the PostgreSQL database server
        # pgPassword: simpherapostgres # The password used to connect to the PostgreSQL database server
        secret: simphera-postgres-credentials # Name of an existing secret that contains the username and the password.
          # The secret must contain the properties `username` and `password`.
        maxServerConnections: 15

    # The metadata of SIMPHERA is stored in the PostgreSQL database. However, other files such as the simulation models, the
    # vehicle specifications or the simulation results are stored on storage systems. The SIMPHERA Helm Chart contains the
    # open-source software MinIO to provide storage to SIMPHERA. It can be used to store the data on Kubernetes persistent volumes,
    # or it can be used as a gateway to Azure Blob Storage or AWS S3.
    minio:
      # If you want to deploy MinIO, then you have to enable the following property.
      enabled: true

      # MinIO uses an admin user with username and password authentication. You either have to specify username and password here
      # using adminUser and adminPassword, or you have to specify the name of an existing secret in adminSecret.
      # The admin secret must contain the fields 'user' and 'password'.
      # adminUser: null
      # adminPassword: null
      adminSecret: simphera-minio-credentials

      # The SIMPHERA Helm Chart supports the following modes for MinIO:
      # You can use MinIO either using a Kubernetes persistent volume or as gateway to Azure Blob Storage or AWS S3.
      # mode: null
      mode: persistent-volume

      # MinIO will use a single persistent volume to store the files. In that case you also have to specify storageClass and storageSize.
      storageClass: hostpath
      storageSize: 80Gi

      # mode: azure
      # MinIO is configured as a gateway to Azure Blob Storage. To authenticate against Azure you either have to specify 'azureStorageAccount'
      # and 'azureStorageKey', or you have to specify 'azureStorageSecret'. The azure storage secret must contain the fields 'account'
      # and 'key'.
      # azureStorageAccount: null
      # azureStorageKey: null
      # azureStorageSecret: null

      # mode: aws
      # MinIO is configured as a gateway to AWS S3. To authenticate against AWS you either have to specify 's3AccessKeyId'
      # and 's3SecretAccessKey', or you have to specify 's3Secret'. The S3 secret must contain the fields 'accesskeyid'
      # and 'secretaccesskey'.
      # If you want to use IRSA (IAM roles for service accounts), you have to set 'enabledIrsa' to `true`.
      # In that case 's3AccessKeyId', 's3SecretAccessKey', and 's3Secret' must be `null`.
      # If you want to use a S3 compatible service instead of the AWS S3 storage, you have to set the 's3serviceEndpoint'.
      # s3AccessKeyId: null
      # s3SecretAccessKey: null
      # s3Secret: null
      # enabledIrsa: false
      # s3serviceEndpoint: null

      # [DEPRECATED: Please use 'global.simphera.serviceAccounts.minio' instead.]
      # MinIO may need to run using a special Kubernetes service account, e.g. to use AWS per IRSA (IAM Roles for Service Accounts).
      # In that case you must create this service account and must specify the name here.
      # serviceAccount: null

    # SIMPHERA uses OpenID Connect for authentication. You can use an existing OpenID Connect provider, such as Azure AD.
    # If you do not yet have a OpenID Connect provider that you can use with SIMPHERA you can deploy Keycloak using the
    # SIMPHERA Helm Chart.
    keycloak:
      # Set the following property to `true` to deploy Keycloak to the Kubernetes cluster.
      # In that case you also have to configure the database connection under `global.simphera.databases.keycloak`.
      enabled: true

      # Either adminUsername/adminPassword has to be specified or the name of an existing secret.
      # An existing secret must use the keys 'username' and 'password'.
      # adminUsername: null
      # adminPassword: null
      adminSecret: simphera-keycloak-credentials
    # The SIMPHERA rtmaps image used during execution can be configured. In the default use case
    # an image provided by dSPACE is used. If there are additional requirements for the image, e.g.
    # there needs to be additional python packages available during the rtmaps execution, a new image can be created
    # and configured here to be used during the execution. For this to work the new image should be based upon the provided image
    # and then be pushed to a different repository in the global image registry. If a tag is provided below the RTMaps image will be pulled from
    # {{ global.simphera.image.registry }}/{{ global.simphera.rtmaps.image.name }}:{{ global.simphera.rtmaps.image.tag }} otherwise from
    # {{ global.simphera.image.registry }}/{{ global.simphera.rtmaps.image.name }}:{{ global.simphera.image.tag }}.
    # Note: The registry only needs to be set if the rtmaps execution docker image is located in a different registry than global.simphera.image.registry.
    # rtmaps:
    #   image:
    #     registry: null
    #     name: dspace/simphera/execution/execution_node/linux/2021a
    #     tag: null

    # If SIMPHERA has to connect to services using TLS and these services use a custom root CA, then you need to create
    # a Kubernetes secret with PEM formatted root certificates. These certificates will be mounted into the pods.
    # If you have more than one custom root certificate you have to concatenate all these PEM formatted certificates
    # into one file.

    customRootCertificates:
      existingSecret: ca-roots # Name of an existing Kubernetes secret containing all custom root CA certificates.
      key: ca-roots.crt # The key inside the secret that contains the PEM formatted content.

    # SIMPHERA needs execution agents to run the simulations. One or more agent pools can be configured.
    # The following node `agent` is used to specify properties that are valid for all agent pools.
    # So it is a kind of default configuration for all pools.
    agent:
      ## Node labels for linux pod assignment
      ## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
      # nodeSelector: {}
      #  kubernetes.io/os: linux

      ## Taints to be tolerated for Pod assignment.
      ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
      # tolerations: []
      #  - key: "toleration"
      #    operator: "Equal"
      #    value: "value"
      #    effect: "NoSchedule"

      ## Extra env vars to be added to all pods. If you need additional capabilities for
      ## the agent then you can add them here
      # extraEnvVars: {}
      extraEnvVars:
        RFS_MINIO_SERVER_SECURE: true
      ## Sidecar containers to be added to the agent's core pod.
      # ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-overview/
      # sidecarContainers: []
      # sidecarContainers: |
      #   - name: sidecar-container
      #     image: sidecar-image:latest
      #     volumeMounts:
      #       - name: some-volume-name
      #         mountPath: /tmp/dspace

      ## the name and tag used for the execution agent container images.
      # image:
      #   name: dspace/simphera/execution/execution_node/linux/2021a
      #   tag:

        ## ref: https://kubernetes.io/docs/concepts/containers/images/#updating-images
        # IfNotPresent, Always
        # pullPolicy: IfNotPresent

      ## Configure additional volumeMounts for the agent container.
      ## ref: https://kubernetes.io/docs/concepts/storage/volumes/
      # volumeMounts: []
      # volumeMounts:
      #   - name: some-volume-name
      #     mountPath: /tmp/dspace

      ## Configure additional volumes for the agent cotainer.
      ## ref: https://kubernetes.io/docs/concepts/storage/volumes/
      # volumes: []
      # volumes:
      #  - name: some-volume-name
      #    emptyDir: {}

      ## Configure resource requests for the agent cotainer.
      ## Ref: https://kubernetes.io/docs/user-guide/compute-resources/
      # resources:
      #   requests:
      #     memory: 4Gi
      #     cpu: 1.8

      ## Logging settings
      ## Set logging verbosity, valid log levels are:
      ## TRACE, DEBUG, INFO, ERROR
      log:
        level: DEBUG
        format: CONSOLE_JSON

      # With the following properties you can configure the scaling behavior.
      # If `useAutoScaler` is `false`, then `maxJobAgentsParallel` instances will be deployed.
      # If `useAutoScaler` is `true`, then an auto-scaler is deployed that automatically scales
      # the number of instances between `minJobAgentsParallel` and `maxJobAgentsParallel`.
      # If the type `statefulset` is used, then each agent is _reused_, i.e. after finishing one
      # simulation then next simulation is executed by the same agent without restarting the pod.
      # If the value is 'job', then a new pod is created for each simulation.
      useAutoScaler: true
      scaling:
        type: statefulset
        minJobAgentsParallel: 1
        maxJobAgentsParallel: 1

    # As mentioned before, the node `agent` just specifies default values for all agent nodes.
    # Under `agentPools` you can configure the concrete agent pools. You can overwrite each individual
    # property that is specified under `agent`. To enable an agent pool you have to set `enabled` to `true`.
    # The following configuration contains one agent pool for regular SIMPHERA validate simulations, and one
    # agent pool for ITC executions. If you do not use ITC you can disable this agent pool.
    # agentPools:
    #   executoragentlinux:
    #     enabled: true

    #   itcagentlinux:
    #     enabled: true
    #     resources:
    #       requests:
    #         memory: 500Mi
    #         cpu: 10m

    #     scaling:
    #       type: statefulset
    #       minJobAgentsParallel: 0
    #       maxJobAgentsParallel: 1

    # SIMPHERA uses MQTT for the communication between the SIMPHERA backend and the execution agents.
    # Therefore, the SIMPHERA Helm Chart contains the open-source software Mosquitto as an MQTT broker
    # that is deployed to the Kubernetes cluster. In most cases, there is no need to change this setting.
    # If you want to use an existing MQTT broker, then you have to set `enabled` to `false`. In any case
    # you have to specify the hostname of your existing MQTT broker under `host`, the topic prefix
    # under `topicPrefix` and the authentication credentials.
    mqtt:
      enabled: true
      # host: mqttmosquittobroker
      # topicPrefix: dspace/simphera/

      # To specify the credentials used for the authentication of the MQTT communication you either have to
      # specify `username` and `password` or you have to reference an existing secret. This secret must contain
      # the keys `username` and `password`.
      # username:
      # password:
      secret: simphera-mqtt-credentials

      # ingress:
      #   # An ingress can be created for the MQTT broker so that the broker is reachable
      #   # from outside the kubernetes cluster. This is needed for the HIL use-case for example.
      #   enabled: true

    # SIMPHERA Data Replay needs access to an existing Recording Data Manager (RDM) instance (eg. INTEMPORA IVS).
    # So if you use Data Replay then you have to enable the connection to an RDM API by setting
    # `enabled` to `true` (this does not deploy the RDM but just enable the connection).
    # rdm:
    #   enabled: false
    #   type: null # The type of the RDM
    #   url: null # The URL of the RDM
    #   apiUrl: null # The URL of the RDM API
    #   username: null # The RDM username
    #   password: null # The RDM password
    #   secretName: null # The name of an existing secret. This secret must contain the keys `username` and `password`.
    #   storageIds: "" # The RDM storage IDs as string
    #   enabledProxy: false # Set to `true` to use the globally configured web proxy to connect to the RDM.

    # By default this Helm chart creates the following Kubernetes service accounts:
    # - simphera
    # - executoragentlinux
    # - executoragentlinuxautoscaler
    # - minio
    # The service accounts need access to the Kubernetes API. Therefore, roles and role bindings
    # will be created for them.
    # If you want to use existing service accounts instead, you have to set the following variables:
    # serviceAccounts:
    #   simphera: null
    #   executorAgentLinux: null
    #   executorAgentLinuxAutoscaler: null
    #   minio: null
    # The service accounts must exist in the same namespace as SIMPHERA itself.
    # You can even use a single service account for everything.
    # If you use existing service account(s) the Helm chart will still add role bindings to these accounts.

    # The logging settings used by all backend services of SIMPHERA.
    # Valid log level values: TRACE, DEBUG, INFO, ERROR
    # log:
    #   level: INFO
    # Sometimes SIMPHERA needs to connect services outside of the Kubernetes cluster, i.e. to
    # access cloud storages. If these services are only accessible using a web proxy this can be
    # configured here.
    # proxy:
    #   hostname: null

    # The internal DNS domain of a Kubernetes cluster is `cluster.local` as a default. If your Kubernetes
    # cluster uses a different domain then you have to specify the name here.
    # clusterDomain: cluster.local

    # SIMPHERA uses a microservice architecture with many individual pods that need to connect
    # to a PostgreSQL database server. PostgreSQL is not designed for accepting a high number of
    # parallel connections. Therefore, some kind of connection pooler is needed. The SIMPHERA
    # Helm Chart includes PGBouncer as connection pooler. In most cases, there is no need to
    # change any settings here. But you can disable the usage of PGBouncer in case you already
    # have a connection pooler in front of our PostgreSQL installation. But please do not use
    # SIMPHERA without any connection pooler.
    # pgbouncer:
    #   enabled: true
    #   # Maximum number of connections to pgbouncer
    #   maxClientConnections: 10000
    #   # TLS mode for the connections from pgbouncer to the PostgreSQL server.
    #   # Values as specified by pgbouncer variable 'server_tls_sslmode' (see https://www.pgbouncer.org/config.html):
    #   # disable,allow,prefer,require,verify-ca,verify-full
    #   serverTlsMode: prefer

    # Enable support for a Linkerd service mesh.
    # Setting this flag does not automatically deploy Linkerd.
    # linkerd:
    #   enabled: false

    # Most views in SIMPHERA's web frontend can be extended by additional links that are typically
    # shown as buttons.
    # additionalLinks: []

#     featureFlags:
#       ## Defines whether AURELION related features are visible
#       showAurelionFeatures: true

# simphera:
#   resultservice:
#     resultStorageName: resultStorage

#   datareplay:
#     resultStorageName: resultStorage
#     cacheStorageName: datareplayProcessingObjectCacheStorage
#     ivsStorageName: ivsStorage

#   scenario:
#     storageName: default

#   experiment:
#     storageName: default
#     measurementStorageName: measurementStorage

#   stepbt:
#     storageName: default
#     resultStorageName: resultStorage

#   vehicle:
#     storageName: default
